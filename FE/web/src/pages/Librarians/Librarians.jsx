import "./Librarians.css";
import { FaPlus, FaSearch, FaFilter, FaTrash, FaEdit } from "react-icons/fa";
import { useEffect, useState } from "react";
import { getLibrarians, deleteLibrarian } from "../../services/librarianService";
import AddLibrarian from "./AddLibrarian";
import EditLibrarian from "./EditLibrarian"; // üëà import form s·ª≠a m·ªõi

export default function Librarians() {
  const [librarians, setLibrarians] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingLibrarian, setEditingLibrarian] = useState(null); // üëà l∆∞u ƒë·ªëi t∆∞·ª£ng ƒëang s·ª≠a

  const fetchData = async () => {
    try {
      const token = sessionStorage.getItem("accessToken");
      if (!token) {
        setError("Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        setLoading(false);
        return;
      }

      const data = await getLibrarians(token);
      if (data.success) setLibrarians(data.librarians);
      else setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch th·ªß th∆∞.");
    } catch (err) {
      console.error("Chi ti·∫øt l·ªói:", err.response || err);
      if (err.response?.status === 401) {
        setError("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        sessionStorage.removeItem("accessToken");
        sessionStorage.removeItem("refreshToken");
      } else {
        setError("L·ªói khi t·∫£i d·ªØ li·ªáu: " + (err.response?.data?.message || err.message));
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getGenderDisplay = (gender) => {
    if (gender && typeof gender === "object" && gender.type === "Buffer" && Array.isArray(gender.data)) {
      const value = gender.data[0];
      return value === 1 ? "Nam" : value === 0 ? "N·ªØ" : "-";
    }
    if (gender === 1 || gender === "1") return "Nam";
    if (gender === 0 || gender === "0") return "N·ªØ";
    return "-";
  };

  // üóëÔ∏è X√≥a th·ªß th∆∞
  const handleDelete = async (id, name) => {
    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·ªß th∆∞ "${name}" kh√¥ng?`);
    if (!confirmed) return;

    try {
      const token = sessionStorage.getItem("accessToken");
      const res = await deleteLibrarian(id, token);
      if (res.success) {
        alert("ƒê√£ x√≥a th·ªß th∆∞ th√†nh c√¥ng!");
        fetchData();
      } else alert(res.message || "Kh√¥ng th·ªÉ x√≥a th·ªß th∆∞.");
    } catch (err) {
      alert("X√≥a th·∫•t b·∫°i: " + (err.response?.data?.message || err.message));
    }
  };

  return (
    <div className="librarian-page">
      <h2>Qu·∫£n l√Ω Th·ªß th∆∞</h2>

      <div className="librarian-toolbar">
        <button className="btn btn-list" onClick={fetchData}>
          Danh s√°ch Th·ªß th∆∞
        </button>
        <button className="btn btn-add" onClick={() => setShowAddModal(true)}>
          <FaPlus /> Th√™m Th·ªß th∆∞ m·ªõi
        </button>
      </div>

      <div className="librarian-search">
        <div className="search-box">
          <FaSearch />
          <input type="text" placeholder="T√¨m ki·∫øm th·ªß th∆∞" />
        </div>
        <FaFilter className="filter-icon" />
      </div>

      {loading && <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>}
      {error && <p className="error">{error}</p>}

      {!loading && !error && (
        <div className="librarian-table">
          <table>
            <thead>
              <tr>
                <th>M√£ th·ªß th∆∞</th>
                <th>H·ªç t√™n</th>
                <th>Gi·ªõi t√≠nh</th>
                <th>Ng√†y sinh</th>
                <th>Email</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {librarians.length === 0 ? (
                <tr>
                  <td colSpan="6" style={{ textAlign: "center" }}>
                    Kh√¥ng c√≥ d·ªØ li·ªáu
                  </td>
                </tr>
              ) : (
                librarians.map((lib) => (
                  <tr key={lib.librarianId}>
                    <td>{lib.librarianCode || `TT${lib.librarianId}`}</td>
                    <td>{lib.fullName}</td>
                    <td>{getGenderDisplay(lib.gender)}</td>
                    <td>{lib.dateOfBirth ? new Date(lib.dateOfBirth).toLocaleDateString("vi-VN") : "-"}</td>
                    <td>{lib.email}</td>
                    <td>
                      <button
                        className="btn-edit"
                        onClick={() => setEditingLibrarian(lib)} // üëà m·ªü modal s·ª≠a
                      >
                        <FaEdit /> S·ª≠a
                      </button>{" "}
                      <button
                        className="btn-delete"
                        onClick={() => handleDelete(lib.librarianId, lib.fullName)}
                      >
                        <FaTrash /> X√≥a
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      )}

      {/* ‚ûï Modal th√™m th·ªß th∆∞ */}
      {showAddModal && (
        <AddLibrarian
          onSuccess={() => {
            setShowAddModal(false);
            fetchData();
          }}
          onCancel={() => setShowAddModal(false)}
        />
      )}

      {/* ‚úèÔ∏è Modal s·ª≠a th·ªß th∆∞ */}
      {editingLibrarian && (
        <EditLibrarian
          librarian={editingLibrarian}
          onSuccess={() => {
            setEditingLibrarian(null);
            fetchData();
          }}
          onCancel={() => setEditingLibrarian(null)}
        />
      )}
    </div>
  );
}
