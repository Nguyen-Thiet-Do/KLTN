import '../../domain/entities/account_entity.dart';
import '../../domain/entities/login_response.dart';
import '../../domain/entities/register_response.dart';
import '../../domain/repositories/auth_repository.dart';
import '../models/account_model.dart';
import '../models/login_response_model.dart';
import '../models/register_response_model.dart';
import '../datasources/authentication_remote_data_source.dart';
import '../datasources/local_storage_data_source.dart';

class AuthenticationRepositoryImpl implements AuthenticationRepository {
  final AuthenticationRemoteDataSource remoteDataSource;
  final LocalStorageDataSource localStorageDataSource;

  AuthenticationRepositoryImpl({
    required this.remoteDataSource,
    required this.localStorageDataSource,
  });

  @override
  Future<LoginResponse> login(String email, String password) async {
    try {
      print('üîê Starting login process for: $email');

      // Validation c∆° b·∫£n
      if (email.isEmpty || password.isEmpty) {
        throw Exception('Email v√† password kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      final LoginResponseModel response = await remoteDataSource.login(
        email,

        password,
      );

      if (response.success && response.data != null) {
        // Ki·ªÉm tra token tr∆∞·ªõc khi l∆∞u
        if (response.data!.accessToken == null ||
            response.data!.refreshToken == null) {
          throw Exception('Token kh√¥ng h·ª£p l·ªá t·ª´ server');
        }

        // L∆ØU TOKEN V√Ä ACCOUNT DATA
        await Future.wait([
          localStorageDataSource.saveTokens(
            response.data!.accessToken!, // Th√™m ! v√¨ ƒë√£ check null ·ªü tr√™n
            response.data!.refreshToken!, // Th√™m ! v√¨ ƒë√£ check null ·ªü tr√™n
          ),
          localStorageDataSource.saveAccount(response.data!),
        ]);

        print(
          ' Login successful, tokens and account saved for: ${response.data!.email}',
        );
        print(' User role: ${response.data!.roleId}');
      } else {
        print(' Login failed: ${response.message}');
        // Kh√¥ng clear data ·ªü ƒë√¢y v√¨ c√≥ th·ªÉ user ch·ªâ nh·∫≠p sai password
      }

      return response.toEntity(); // ‚úÖ Tr·∫£ v·ªÅ Entity thay v√¨ Model
    } catch (e) {
      print('Login error: $e');

      // Ph√¢n lo·∫°i l·ªói ƒë·ªÉ x·ª≠ l√Ω ph√π h·ª£p
      if (e.toString().contains('Network') || e.toString().contains('m·∫°ng')) {
        throw Exception('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet');
      } else if (e.toString().contains('Format')) {
        throw Exception('L·ªói x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ server');
      } else {
        throw Exception(
          'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${e.toString().replaceFirst('Exception: ', '')}',
        );
      }
    }
  }

  @override
  Future<RegisterResponse> register(Map<String, dynamic> data) async {
    try {
      print('üìù Starting registration process for: ${data['email']}');

      // Validation d·ªØ li·ªáu ƒëƒÉng k√Ω
      if (data['email'] == null || data['password'] == null) {
        throw Exception('Email v√† password l√† b·∫Øt bu·ªôc');
      }

      if ((data['password'] as String).length < 6) {
        throw Exception('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      }

      final RegisterResponseModel response = await remoteDataSource.register(
        data,
      );

      if (response.success && response.data != null) {
        print('‚úÖ Registration successful for: ${data['email']}');

        // T√πy ch·ªçn: Auto-login sau khi register th√†nh c√¥ng
        // await _autoLoginAfterRegister(data['email'], data['password']);
      } else {
        print(' Registration failed: ${response.message}');
      }

      return response.toEntity(); // ‚úÖ Tr·∫£ v·ªÅ Entity thay v√¨ Model
    } catch (e) {
      print(' Registration error: $e');

      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ cho ƒëƒÉng k√Ω
      final errorMessage = e.toString();
      if (errorMessage.contains('Email already exists') ||
          errorMessage.contains('Email ƒë√£ t·ªìn t·∫°i')) {
        throw Exception('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
      } else if (errorMessage.contains('Network')) {
        throw Exception('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet');
      } else {
        throw Exception(
          'ƒêƒÉng k√Ω th·∫•t b·∫°i: ${errorMessage.replaceFirst('Exception: ', '')}',
        );
      }
    }
  }

  @override
  Future<void> logout() async {
    try {
      print(' Starting logout process...');

      // L·∫•y access token tr∆∞·ªõc khi clear data
      final accessToken = await localStorageDataSource.getAccessToken();

      // G·ªçi API logout n·∫øu c√≥ token (kh√¥ng b·∫Øt bu·ªôc th√†nh c√¥ng)
      if (accessToken != null && accessToken.isNotEmpty) {
        try {
          await remoteDataSource.logout(accessToken);
          print(' Logout API call successful');
        } catch (e) {
          print(' Logout API call failed but continuing: $e');
          // V·∫´n ti·∫øp t·ª•c clear local data d√π API call th·∫•t b·∫°i
        }
      }

      // Lu√¥n clear local data
      await localStorageDataSource.clearAllData();
      print('Logout completed successfully');
    } catch (e) {
      print(' Logout error: $e');
      // V·∫´n clear local data ngay c·∫£ khi c√≥ l·ªói
      await localStorageDataSource.clearAllData();
      throw Exception('ƒêƒÉng xu·∫•t ho√†n t·∫•t nh∆∞ng c√≥ l·ªói x·∫£y ra');
    }
  }

  @override
  Future<bool> isLoggedIn() async {
    try {
      final isLoggedIn = await localStorageDataSource.isLoggedIn();
      print('üîç Login status check: $isLoggedIn');

      if (isLoggedIn) {
        // Ki·ªÉm tra th√™m xem token c√≥ h·∫øt h·∫°n kh√¥ng (n·∫øu c·∫ßn)
        // final isTokenValid = await _checkTokenValidity();
        // return isTokenValid;
      }

      return isLoggedIn;
    } catch (e) {
      print(' Error checking login status: $e');
      // Khi c√≥ l·ªói ki·ªÉm tra, coi nh∆∞ ch∆∞a ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫£o m·∫≠t
      return false;
    }
  }

  @override
  Future<Account?> getCurrentUser() async {
    try {
      final AccountModel? accountModel = await localStorageDataSource
          .getAccount();

      if (accountModel != null) {
        final account = accountModel.toEntity();
        print(
          ' Current user loaded: ${account.email} (Role: ${account.roleId})',
        );
        return account; // ‚úÖ Tr·∫£ v·ªÅ Account Entity
      } else {
        print(' No current user found');
        return null;
      }
    } catch (e) {
      print(' Error getting current user: $e');
      return null;
    }
  }

  @override
  Future<LoginResponse?> refreshToken() async {
    try {
      final refreshToken = await localStorageDataSource.getRefreshToken();
      if (refreshToken == null) {
        print('‚ùå No refresh token available for refresh');
        return null;
      }

      print('üîÑ Starting token refresh process...');

      final LoginResponseModel response = await remoteDataSource.refreshToken(
        refreshToken,
      );

      if (response.success && response.data != null) {
        // Ki·ªÉm tra token tr∆∞·ªõc khi l∆∞u
        if (response.data!.accessToken == null ||
            response.data!.refreshToken == null) {
          throw Exception('Token kh√¥ng h·ª£p l·ªá t·ª´ server');
        }

        await localStorageDataSource.saveTokens(
          response.data!.accessToken!,
          response.data!.refreshToken!,
        );

        print('‚úÖ Token refresh successful');
        return response.toEntity();
      } else {
        print('‚ùå Token refresh failed: ${response.message}');
        await localStorageDataSource.clearAllData();
        return null;
      }
    } catch (e) {
      print('üí• Token refresh error: $e');

      if (e.toString().contains('401') || e.toString().contains('invalid')) {
        print('üö® Refresh token invalid, clearing local data...');
        await localStorageDataSource.clearAllData();
      }

      return null;
    }
  }

  @override
  Future<String?> getAccessToken() async {
    try {
      final token = await localStorageDataSource.getAccessToken();
      return token;
    } catch (e) {
      print('üí• Error getting access token: $e');
      return null;
    }
  }

  // Helper method: Auto-login sau khi register (t√πy ch·ªçn)
  Future<void> _autoLoginAfterRegister(String email, String password) async {
    try {
      print('üîÑ Attempting auto-login after registration...');
      await login(email, password);
      print('‚úÖ Auto-login successful after registration');
    } catch (e) {
      print('‚ö†Ô∏è Auto-login failed after registration: $e');
      // Kh√¥ng throw error v√¨ register ƒë√£ th√†nh c√¥ng
    }
  }

  // Helper method: Ki·ªÉm tra token validity (n·∫øu c·∫ßn tri·ªÉn khai)
  Future<bool> _checkTokenValidity() async {
    try {
      final token = await localStorageDataSource.getAccessToken();
      if (token == null) return false;

      // C√≥ th·ªÉ th√™m logic ki·ªÉm tra JWT expiration ·ªü ƒë√¢y
      // S·ª≠ d·ª•ng package: jwt_decoder
      return true;
    } catch (e) {
      return false;
    }
  }

  //Helper method: Update user profile (n·∫øu c·∫ßn)
  Future<void> updateUserProfile(Account updatedAccount) async {
    try {
      // Convert entity to model
      final accountModel = AccountModel(
        accountId: updatedAccount.accountId,
        email: updatedAccount.email,
        phoneNumber: updatedAccount.phoneNumber,
        roleId: updatedAccount.roleId,
        accessToken: updatedAccount.accessToken ?? '',
        refreshToken: updatedAccount.refreshToken ?? '',
      );

      await localStorageDataSource.saveAccount(accountModel);
      print(' User profile updated successfully');
    } catch (e) {
      print(' Error updating user profile: $e');
      throw Exception('Failed to update user profile');
    }
  }
}
